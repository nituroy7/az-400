2.Merging strategies
In Git, merging is the process of integrating changes from different branches. Here are the different types of merging strategies commonly used:
1. Fast-Forward Merge
•	Description: This occurs when the current branch is directly ahead of the branch being merged. Git simply moves the current branch pointer forward to the target branch.
•	Usage: When there are no divergent commits between the branches.
•	Pros: Keeps a linear project history.
•	Cons: Only applicable if there are no separate commits on the current branch since the branch was created.
2. Three-Way Merge
•	Description: This occurs when the branches have diverged. Git creates a new merge commit that combines the changes from both branches.
•	Usage: When both branches have unique commits.
•	Pros: Records the merge event and provides a clear history of branch integration.
•	Cons: Can result in a more complex commit history.
3. Squash Merge
•	Description: Combines all changes from the feature branch into a single commit before merging into the target branch.
•	Usage: When you want to keep the main branch history clean.
•	Pros: Produces a tidy commit history by collapsing all commits from the feature branch.
•	Cons: Loses the individual commit history of the feature branch.
4. Rebase and Merge
•	Description: Replays the commits from the current branch onto the target branch and then fast-forwards the target branch to include these commits.
•	Usage: When you want to maintain a linear history.
•	Pros: Keeps a clean, linear history without merge commits.
•	Cons: Can rewrite commit history, which can be problematic for shared branches.
5. Recursive Merge (Default)
•	Description: A more complex strategy that handles multiple branches by recursively merging all necessary branches.
•	Usage: Default strategy for merging with multiple parent branches.
•	Pros: Handles complex branch histories.
•	Cons: Can create complex histories and might require manual conflict resolution.
6. Octopus Merge
•	Description: Allows merging of more than two branches at once.
•	Usage: When you need to merge multiple feature branches at the same time.
•	Pros: Efficient for merging several branches in one go.
•	Cons: Difficult to resolve conflicts if they occur.
Merge Conflict Resolution
•	Manual Resolution: When automatic merging is not possible due to conflicts, manual intervention is required to resolve these conflicts.
•	Tool-Assisted: Tools like git mergetool can help visualize and resolve conflicts.
